# filename: overview_json.py
# version: 1.0.3
# date: 2025-03-02

"""
Module: overview_json.py

This module compiles all resume JSONs (generated by resume_extractor.py) found in the processed resume data folder
into a master JSON file called MASTER_RESUME_JSON.json. The master file contains six datasets:
    1. objectives: all unique objective statements.
    2. skills: all unique skills.
    3. J1: all unique job bullets from the first job.
    4. J2: all unique job bullets from the second job.
    5. J3: all unique job bullets from the third job.
    6. J4: all unique job bullets from the fourth job.

For each job bullet, the module extracts a “minititle” from the bullet's bolded overview ONLY.
A minititle is defined as a set of 1–6 words at the very start of the bullet’s bolded overview that is immediately followed by a colon.
"""

# ****** DONE ******
# 1. Removed the last-run timestamp logic since processed resumes are moved.
# 2. Modified the file to scan all JSON files in the resume_data directory.
# 3. Added deduplication for objectives, skills, and job bullet full texts.
# 4. Implemented minititle extraction only on job bullet bolded_overview fields.
# 5. Updated log messages to reflect changes in data processing.

# ****** TO-DO ******
# 1. Add error handling for corrupt or invalid JSON files.
# 2. Write unit tests for extract_minititle() and compile_master_data() functions.
# 3. Optimize the deduplication process for very large datasets.
# 4. Provide an option to archive or backup the master JSON upon each run.
# 5. Add command-line arguments to specify custom input and output directories.

import os
import json
import re
from pathlib import Path
from typing import Dict, List, Set

from config_manager import CONFIG
from logging_manager import log_process
from helpers import safe_file_write

# Define paths.
EXTRACTED_DATA_DIR = Path(CONFIG.get("EXTRACTED_DATA_DIR", "EXTRACTED_DATA"))
# Assumes that processed resume JSON files are kept in this folder.
RESUME_DATA_DIR = EXTRACTED_DATA_DIR / "resume_data"
MASTER_JSON_PATH = EXTRACTED_DATA_DIR / "MASTER_RESUME_JSON.json"

# Regex to extract a minititle: one to six words immediately followed by a colon.
# Note: This function should ONLY be used on job bullet bolded overview texts.
MINITITLE_REGEX = re.compile(r"^((?:\S+\s?){1,6}):")

def extract_minititle(bolded_overview: str) -> str:
    """
    Extracts a minititle from the given bullet's bolded overview.
    
    Note: This function MUST only be applied to job bullet bolded overview fields.
    It checks if the text begins with 1-6 words followed by a colon and returns the minititle (without the colon).
    If no valid minititle is found, returns an empty string.
    """
    bolded_overview = bolded_overview.strip()
    match = MINITITLE_REGEX.match(bolded_overview)
    if match:
        candidate = match.group(1).strip()
        if 1 <= len(candidate.split()) <= 6:
            return candidate
    return ""

def compile_master_data() -> Dict[str, object]:
    """
    Iterates over all resume JSON files in RESUME_DATA_DIR,
    extracts objectives, skills, and job bullet data (for up to 4 jobs), and deduplicates them.
    Returns a dictionary with keys: 'objectives', 'skills', and 'job_bullets' (with subkeys 'J1'-'J4').
    """
    master_objectives: Set[str] = set()
    master_skills: Set[str] = set()
    # Prepare bullet containers for up to 4 jobs.
    master_bullets: Dict[str, Dict[str, Dict[str, str]]] = {
        "J1": {},
        "J2": {},
        "J3": {},
        "J4": {}
    }
    
    if not RESUME_DATA_DIR.exists():
        log_process(f"Resume data directory not found at {RESUME_DATA_DIR}", "ERROR", module="OverviewJSON")
        return {}

    for json_file in RESUME_DATA_DIR.glob("RES-*.json"):
        try:
            with json_file.open("r", encoding="utf-8") as f:
                data = json.load(f)
            
            # Extract objective.
            objective = data.get("objective", "").strip()
            if objective:
                master_objectives.add(objective)
            
            # Extract skills.
            skills = data.get("skills_list", [])
            for skill in skills:
                skill = skill.strip()
                if skill:
                    master_skills.add(skill)
            
            # Extract job bullets from jobs_section (only first 4 jobs)
            jobs_section = data.get("jobs_section", [])
            for idx, job in enumerate(jobs_section[:4]):
                section_key = f"J{idx+1}"
                bullets = job.get("bullets", [])
                for bullet in bullets:
                    bolded = bullet.get("bolded_overview", "").strip()
                    description = bullet.get("description", "").strip()
                    full_text = (bolded + " " + description).strip()
                    if not full_text:
                        continue
                    # Ensure that minititle extraction is performed ONLY on job bullet bolded text.
                    minititle = extract_minititle(bolded)
                    # Deduplicate based on full_text.
                    if full_text not in master_bullets[section_key]:
                        master_bullets[section_key][full_text] = {
                            "full_text": full_text,
                            "minititle": minititle
                        }
        except Exception as e:
            log_process(f"Error processing {json_file.name}: {e}", "ERROR", module="OverviewJSON")
    
    compiled_data = {
        "objectives": sorted(master_objectives),
        "skills": sorted(master_skills),
        "job_bullets": {
            "J1": list(master_bullets["J1"].values()),
            "J2": list(master_bullets["J2"].values()),
            "J3": list(master_bullets["J3"].values()),
            "J4": list(master_bullets["J4"].values())
        }
    }
    return compiled_data

def save_master_json(master_data: Dict[str, object]):
    """
    Saves the compiled master data to MASTER_RESUME_JSON.json.
    """
    try:
        safe_file_write(MASTER_JSON_PATH, master_data)
        log_process(f"Master resume JSON saved to {MASTER_JSON_PATH}", "INFO", module="OverviewJSON")
    except Exception as e:
        log_process(f"Failed to save master JSON: {e}", "ERROR", module="OverviewJSON")

def main():
    """
    Main function to compile resume data into a master JSON file.
    """
    log_process("Starting compilation of master resume JSON...", "INFO", module="OverviewJSON")
    master_data = compile_master_data()
    if master_data:
        save_master_json(master_data)
    else:
        log_process("No resume data found to compile.", "INFO", module="OverviewJSON")
    log_process("Compilation complete.", "INFO", module="OverviewJSON")

if __name__ == "__main__":
    main()
